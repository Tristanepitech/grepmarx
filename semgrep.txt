                     
                     
┌───────────────────┐
│ 121 Code Findings │
└───────────────────┘
                                                               
    data/projects/5/extract/juice-shop-19.0.0/cypress.config.ts
    ❯❱ data.projects.5.rules.lazy-load-module
          Lazy loading can complicate code bundling if care is not taken, also `require`s are run         
          synchronously by Node.js. If they are called from within a function, it may block other requests
          from being handled at a more critical time. The best practice is to `require` modules at the    
          beginning of each file, before and outside of any functions.                                    
                                                                                                          
           39┆ const trainingData = require(`data/chatbot/${utils.extractFilename(
           40┆   config.get('application.chatBot.trainingData')
           41┆ )}`)
                                                                                          
    data/projects/5/extract/juice-shop-19.0.0/data/static/codefixes/dbSchemaChallenge_1.ts
    ❯❱ data.projects.5.rules.sequelize-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. Data replacement or data binding should be used. See                                     
          https://sequelize.org/master/manual/raw-queries.html                                                
                                                                                                              
            5┆ models.sequelize.query("SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%' OR
               description LIKE '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name")           
   
   ❯❯❱ data.projects.5.rules.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
                                                                                                              
            5┆ models.sequelize.query("SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%' OR
               description LIKE '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name")           
    
    
          Taint comes from:
    
            3┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
          Taint flows through these intermediate variables:
    
            3┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
                This is how taint reaches the sink:
    
            5┆ models.sequelize.query("SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%' OR
               description LIKE '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name")           
    
                                                                                          
    data/projects/5/extract/juice-shop-19.0.0/data/static/codefixes/dbSchemaChallenge_3.ts
    ❯❱ data.projects.5.rules.sequelize-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. Data replacement or data binding should be used. See                                     
          https://sequelize.org/master/manual/raw-queries.html                                                
                                                                                                              
           11┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
   
   ❯❯❱ data.projects.5.rules.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
                                                                                                              
           11┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
    
    
          Taint comes from:
    
            5┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
          Taint flows through these intermediate variables:
    
            5┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
                This is how taint reaches the sink:
    
           11┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
    
                                                                                            
    data/projects/5/extract/juice-shop-19.0.0/data/static/codefixes/restfulXssChallenge_2.ts
     ❱ data.projects.5.rules.detect-replaceall-sanitization
          Detected a call to `replaceAll()` in an attempt to HTML escape the string                        
          `tableData[i].description`. Manually sanitizing input through a manually built list can be       
          circumvented in many situations, and it's better to use a well known sanitization library such as
          `sanitize-html` or `DOMPurify`.                                                                  
                                                                                                           
           62┆ tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>',
               '&gt;')                                                                                    
   
    ❯❱ data.projects.5.rules.no-replaceall
          The string method replaceAll is not supported in all versions of javascript, and is not supported by
          older browser versions. Consider using replace() with a regex as the first argument instead like    
          mystring.replace(/bad/g, "good") instead of mystring.replaceAll("bad", "good")                      
          (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)                                
                                                                                                              
           62┆ tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>',
               '&gt;')                                                                                    
   
     ❱ data.projects.5.rules.detect-replaceall-sanitization
          Detected a call to `replaceAll()` in an attempt to HTML escape the string                          
          `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a manually   
          built list can be circumvented in many situations, and it's better to use a well known sanitization
          library such as `sanitize-html` or `DOMPurify`.                                                    
                                                                                                             
           62┆ tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>',
               '&gt;')                                                                                    
   
    ❯❱ data.projects.5.rules.no-replaceall
          The string method replaceAll is not supported in all versions of javascript, and is not supported by
          older browser versions. Consider using replace() with a regex as the first argument instead like    
          mystring.replace(/bad/g, "good") instead of mystring.replaceAll("bad", "good")                      
          (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)                                
                                                                                                              
           62┆ tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>',
               '&gt;')                                                                                    
                                                                                                   
    data/projects/5/extract/juice-shop-19.0.0/data/static/codefixes/unionSqlInjectionChallenge_1.ts
    ❯❱ data.projects.5.rules.sequelize-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. Data replacement or data binding should be used. See                                     
          https://sequelize.org/master/manual/raw-queries.html                                                
                                                                                                              
            6┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
   
   ❯❯❱ data.projects.5.rules.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
                                                                                                              
            6┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
    
    
          Taint comes from:
    
            3┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
          Taint flows through these intermediate variables:
    
            3┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
                This is how taint reaches the sink:
    
            6┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
    
                                                                                                   
    data/projects/5/extract/juice-shop-19.0.0/data/static/codefixes/unionSqlInjectionChallenge_3.ts
    ❯❱ data.projects.5.rules.sequelize-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. Data replacement or data binding should be used. See                                     
          https://sequelize.org/master/manual/raw-queries.html                                                
                                                                                                              
           10┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
   
   ❯❯❱ data.projects.5.rules.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
                                                                                                              
           10┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
    
    
          Taint comes from:
    
            3┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
          Taint flows through these intermediate variables:
    
            3┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
                This is how taint reaches the sink:
    
           10┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
    
                                                                                       
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/about/about.component.ts
    ❯❱ data.projects.5.rules.html-in-template-string
          This template literal looks like HTML and has interpolated variables. These variables are not HTML-
          encoded by default. If the variables contain HTML tags, these may be interpreted by the browser,   
          resulting in cross-site scripting (XSS).                                                           
                                                                                                             
          118┆ feedbacks[i].comment = `<span style="width: 90%; display:block;">${
          119┆   feedbacks[i].comment
          120┆ }<br/> (${this.stars[feedbacks[i].rating]})</span>`
                                                                                                         
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/administration/administration.component.ts
    ❯❱ data.projects.5.rules.html-in-template-string
          This template literal looks like HTML and has interpolated variables. These variables are not HTML-
          encoded by default. If the variables contain HTML tags, these may be interpreted by the browser,   
          resulting in cross-site scripting (XSS).                                                           
                                                                                                             
           57┆ user.email = this.sanitizer.bypassSecurityTrustHtml(`<span        
               class="${this.doesUserHaveAnActiveSession(user) ? 'confirmation' :
               'error'}">${user.email}</span>`)                                  
                                                                                                       
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/last-login-ip/last-login-ip.component.ts
    ❯❱ data.projects.5.rules.html-in-template-string
          This template literal looks like HTML and has interpolated variables. These variables are not HTML-
          encoded by default. If the variables contain HTML tags, these may be interpreted by the browser,   
          resulting in cross-site scripting (XSS).                                                           
                                                                                                             
           38┆ this.lastLoginIp =                                                                  
               this.sanitizer.bypassSecurityTrustHtml(`<small>${payload.data.lastLoginIp}</small>`)
                                                                                       
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/login/login.component.ts
   ❯❯❱ data.projects.5.rules.detected-google-oauth-url
          Google OAuth url detected
                                   
           48┆ public clientId =                                                          
               '1005568560502-6hm16lef8oh46hr2d98vf2ohlnj4nfhq.apps.googleusercontent.com'
                                                                                           
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/navbar/navbar.component.html
    ❯❱ data.projects.5.rules.unquoted-attribute-var
          Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject
          custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{
          expr }}".                                                                                         
                                                                                                            
           17┆ <img [src]="logoSrc" class="logo" alt={{applicationName}}>
                                                                                                             
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/purchase-basket/purchase-basket.component.html
    ❯❱ data.projects.5.rules.unquoted-attribute-var
          Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject
          custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{
          expr }}".                                                                                         
                                                                                                            
           15┆ <img [src]="'assets/public/images/products/'+element.image" alt={{element.name}}
                                                                                                         
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/search-result/search-result.component.html
    ❯❱ data.projects.5.rules.unquoted-attribute-var
          Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject
          custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{
          expr }}".                                                                                         
                                                                                                            
           40┆ <img mat-card-image [src]="'assets/public/images/products/'+item.image" alt={{item.name}}
                                                                                                     
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/track-result/track-result.component.ts
    ❯❱ data.projects.5.rules.html-in-template-string
          This template literal looks like HTML and has interpolated variables. These variables are not HTML-
          encoded by default. If the variables contain HTML tags, these may be interpreted by the browser,   
          resulting in cross-site scripting (XSS).                                                           
                                                                                                             
           45┆ this.results.orderNo =                                                           
               this.sanitizer.bypassSecurityTrustHtml(`<code>${results.data[0].orderId}</code>`)
                                                                                                     
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/app/web3-sandbox/web3-sandbox.component.ts
     ❱ data.projects.5.rules.missing-template-string-indicator
          This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?
                                                                                                  
           73┆   code: string = `// SPDX-License-Identifier: MIT
           74┆ pragma solidity ^0.8.14;
           75┆
           76┆ contract HelloWorld {
           77┆     function get()public pure returns (string memory){
           78┆         return 'Hello Contracts';
           79┆     }
           80┆ }`
            ⋮┆----------------------------------------
           73┆   code: string = `// SPDX-License-Identifier: MIT
           74┆ pragma solidity ^0.8.14;
           75┆
           76┆ contract HelloWorld {
           77┆     function get()public pure returns (string memory){
           78┆         return 'Hello Contracts';
           79┆     }
           80┆ }`
   
    ❯❱ data.projects.5.rules.unsafe-dynamic-method
          Using non-static data to retrieve and run functions from the object is dangerous. If the data is
          user-controlled, it may allow executing arbitrary code.                                         
                                                                                                          
          221┆ const transaction = await contract.functions[func.name](
          222┆   ...inputs,
          223┆   transactionOptions
          224┆ )
                                                                                  
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/assets/private/three.js
    ❯❱ data.projects.5.rules.prototype-pollution-assignment
          Possibility of prototype polluting assignment detected. By adding or modifying attributes of an     
          object prototype, it is possible to create attributes that exist on every object, or replace        
          critical attributes with malicious ones. This can be problematic if the software depends on         
          existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype
          (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object   
          prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of 
          attributes that resolve to object prototype, using Map instead of object.                           
                                                                                                              
          9879┆ sortedAttr[ new_vid * attrSize + k ] = attrArray[ vid * attrSize + k ];
   
   ❯❯❱ data.projects.5.rules.insecure-document-method
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
                                                                                                              
          11375┆ this.statusDomElement.innerHTML = message;
   
   ❯❯❱ data.projects.5.rules.insecure-innerhtml
          User controlled data in a `this.statusDomElement.innerHTML` is an anti-pattern that can lead to XSS
          vulnerabilities                                                                                    
                                                                                                             
          11375┆ this.statusDomElement.innerHTML = message;
   
    ❯❱ data.projects.5.rules.prototype-pollution-assignment
          Possibility of prototype polluting assignment detected. By adding or modifying attributes of an     
          object prototype, it is possible to create attributes that exist on every object, or replace        
          critical attributes with malicious ones. This can be problematic if the software depends on         
          existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype
          (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object   
          prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of 
          attributes that resolve to object prototype, using Map instead of object.                           
                                                                                                              
          22519┆ vka[ offset_morphTarget + 1 ] = v1.y;
            ⋮┆----------------------------------------
          22520┆ vka[ offset_morphTarget + 2 ] = v1.z;
            ⋮┆----------------------------------------
          22522┆ vka[ offset_morphTarget + 3 ] = v2.x;
            ⋮┆----------------------------------------
          22523┆ vka[ offset_morphTarget + 4 ] = v2.y;
            ⋮┆----------------------------------------
          22524┆ vka[ offset_morphTarget + 5 ] = v2.z;
            ⋮┆----------------------------------------
          22526┆ vka[ offset_morphTarget + 6 ] = v3.x;
            ⋮┆----------------------------------------
          22527┆ vka[ offset_morphTarget + 7 ] = v3.y;
            ⋮┆----------------------------------------
          22528┆ vka[ offset_morphTarget + 8 ] = v3.z;
            ⋮┆----------------------------------------
          22553┆ nka[ offset_morphTarget + 1 ] = n1.y;
            ⋮┆----------------------------------------
          22554┆ nka[ offset_morphTarget + 2 ] = n1.z;
            ⋮┆----------------------------------------
          22556┆ nka[ offset_morphTarget + 3 ] = n2.x;
            ⋮┆----------------------------------------
          22557┆ nka[ offset_morphTarget + 4 ] = n2.y;
            ⋮┆----------------------------------------
          22558┆ nka[ offset_morphTarget + 5 ] = n2.z;
            ⋮┆----------------------------------------
          22560┆ nka[ offset_morphTarget + 6 ] = n3.x;
            ⋮┆----------------------------------------
          22561┆ nka[ offset_morphTarget + 7 ] = n3.y;
            ⋮┆----------------------------------------
          22562┆ nka[ offset_morphTarget + 8 ] = n3.z;
   
     ❱ data.projects.5.rules.useless-assignment
          `ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ]` is assigned twice; the first
          assignment is useless                                                                              
                                                                                                             
          28593┆ ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;
          28594┆
          28595┆ var face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;
            ⋮┆----------------------------------------
     ❱ data.projects.5.rules.useless-assignment
          `coords[ index ++ ]` is assigned twice; the first assignment is useless
                                                                                 
          35765┆ coords[ index ++ ] = vertex.x;
          35766┆ coords[ index ++ ] = vertex.y;
            ⋮┆----------------------------------------
          35766┆ coords[ index ++ ] = vertex.y;
          35767┆ coords[ index ++ ] = vertex.z;
            ⋮┆----------------------------------------
          35770┆ coords[ index ++ ] = vertex.x;
          35771┆ coords[ index ++ ] = vertex.y;
            ⋮┆----------------------------------------
          35771┆ coords[ index ++ ] = vertex.y;
          35772┆ coords[ index ++ ] = vertex.z;
            ⋮┆----------------------------------------
     ❱ data.projects.5.rules.useless-assignment
          `_lensFlare.vertices[ i++ ]` is assigned twice; the first assignment is useless
                                                                                         
          36961┆ _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1;        // vertex
            ⋮┆----------------------------------------
          36961┆ _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1;        // vertex
          36962┆ _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0; // uv... etc.
            ⋮┆----------------------------------------
          36962┆ _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0; // uv... etc.
            ⋮┆----------------------------------------
          36962┆ _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0; // uv... etc.
          36963┆
          36964┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;
            ⋮┆----------------------------------------
          36964┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;
            ⋮┆----------------------------------------
          36964┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;
          36965┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;
            ⋮┆----------------------------------------
          36965┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;
            ⋮┆----------------------------------------
          36965┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;
          36966┆
          36967┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
            ⋮┆----------------------------------------
          36967┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
            ⋮┆----------------------------------------
          36967┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
          36968┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
            ⋮┆----------------------------------------
          36968┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
            ⋮┆----------------------------------------
          36968┆ _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
          36969┆
          36970┆ _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;
            ⋮┆----------------------------------------
          36970┆ _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;
            ⋮┆----------------------------------------
          36970┆ _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;
          36971┆ _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;
            ⋮┆----------------------------------------
          36971┆ _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;
            ⋮┆----------------------------------------
     ❱ data.projects.5.rules.useless-assignment
          `_lensFlare.faces[ i++ ]` is assigned twice; the first assignment is useless
                                                                                      
          36974┆ _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;
            ⋮┆----------------------------------------
          36974┆ _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;
            ⋮┆----------------------------------------
          36974┆ _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;
          36975┆ _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;
            ⋮┆----------------------------------------
          36975┆ _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;
            ⋮┆----------------------------------------
          36975┆ _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;
                                                                                                
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/hacking-instructor/helpers/helpers.ts
    ❯❱ data.projects.5.rules.prototype-pollution-loop
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
                                                                                                              
           38┆ replacementValue = replacementValue[property]
   
     ❱ data.projects.5.rules.useless-assignment
          `delay` is assigned twice; the first assignment is useless
                                                                    
          142┆ let delay = playbackDelays[config.hackingInstructor.hintPlaybackSpeed]
          143┆ delay ??= 1.0
                                                                                      
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/hacking-instructor/index.ts
   ❯❯❱ data.projects.5.rules.insecure-document-method
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
                                                                                                              
          122┆ textBox.innerHTML = snarkdown(hint.text)
   
   ❯❯❱ data.projects.5.rules.insecure-innerhtml
          User controlled data in a `textBox.innerHTML` is an anti-pattern that can lead to XSS
          vulnerabilities                                                                      
                                                                                               
          122┆ textBox.innerHTML = snarkdown(hint.text)
                                                                     
    data/projects/5/extract/juice-shop-19.0.0/frontend/src/index.html
    ❯❱ data.projects.5.rules.missing-integrity
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
                                                                                                              
           14┆ <link rel="stylesheet" type="text/css"                                               
               href="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.css" />
            ⋮┆----------------------------------------
           15┆ <script                                                                                   
               src="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js"></script>
            ⋮┆----------------------------------------
           16┆ <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
                                                                     
    data/projects/5/extract/juice-shop-19.0.0/lib/codingChallenges.ts
     ❱ data.projects.5.rules.missing-template-string-indicator
          This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?
                                                                                                  
           59┆ const snippets = source.match(`[/#]{0,2} vuln-code-snippet          
               start.*${challengeKey}([^])*vuln-code-snippet end.*${challengeKey}`)
            ⋮┆----------------------------------------
           59┆ const snippets = source.match(`[/#]{0,2} vuln-code-snippet          
               start.*${challengeKey}([^])*vuln-code-snippet end.*${challengeKey}`)
   
    ❯❱ data.projects.5.rules.detect-non-literal-regexp
          RegExp() called with a `challengeKey` function argument, this might allow an attacker to cause a    
          Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main      
          thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on
          user-controlled input, consider performing input validation or use a regex checking/sanitization    
          library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear      
          vulnerable to ReDoS.                                                                                
                                                                                                              
           76┆ if (new RegExp(`vuln-code-snippet vuln-line.*${challengeKey}`).exec(lines[i]) != null) {
    
    
          Taint comes from:
    
           58┆ function getCodingChallengeFromFileContent (source: string, challengeKey: string) {
    
    
          Taint flows through these intermediate variables:
    
           58┆ function getCodingChallengeFromFileContent (source: string, challengeKey: string) {
    
    
                This is how taint reaches the sink:
    
           76┆ if (new RegExp(`vuln-code-snippet vuln-line.*${challengeKey}`).exec(lines[i]) != null) {
    
    
            ⋮┆----------------------------------------
           78┆ } else if (new RegExp(`vuln-code-snippet neutral-line.*${challengeKey}`).exec(lines[i]) !=
               null) {                                                                                   
    
    
          Taint comes from:
    
           58┆ function getCodingChallengeFromFileContent (source: string, challengeKey: string) {
    
    
          Taint flows through these intermediate variables:
    
           58┆ function getCodingChallengeFromFileContent (source: string, challengeKey: string) {
    
    
                This is how taint reaches the sink:
    
           78┆ } else if (new RegExp(`vuln-code-snippet neutral-line.*${challengeKey}`).exec(lines[i]) !=
               null) {                                                                                   
    
                                                               
    data/projects/5/extract/juice-shop-19.0.0/lib/insecurity.ts
     ❱ data.projects.5.rules.private-key
          A gitleaks private-key was detected which attempts to identify hard-coded credentials. It is not  
          recommended to store credentials in source-code, as this risks secrets being leaked and used by   
          either an internal or external malicious adversary. It is recommended to use environment variables
          to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware      
          Security Module).                                                                                 
                                                                                                            
           23┆ const privateKey = '-----BEGIN RSA PRIVATE KEY-----                                        
               \r\nMIICXAIBAAKBgQDNwqLEe9wgTXCbC7+RPdDbBbeqjdbs4kOPOIGzqLpXvJXlxxW8iMz0EaM4BKUqYsIa+ndv3NA
               n2RxCd5ubVdJJcX43zO6Ko0TFEZx/65gY3BE0O6syCEmUP4qbSd6exou/F+WTISzbQ5FBVPVmhnYhG/kpwt/cIxK5iU
               n5hm+4tQIDAQABAoGBAI+8xiPoOrA+KMnG/T4jJsG6TsHQcDHvJi7o1IKC/hnIXha0atTX5AUkRRce95qSfvKFweXdJ
               XSQ0JMGJyfuXgU6dI0TcseFRfewXAa/ssxAC+iUVR6KUMh1PE2wXLitfeI6JLvVtrBYswm2I7CtY0q8n5AGimHWVXJP
               LfGV7m0BAkEA+fqFt2LXbLtyg6wZyxMA/cnmt5Nt3U2dAu77MzFJvibANUNHE4HPLZxjGNXN+a6m0K6TD4kDdh5HfUY
               LWWRBYQJBANK3carmulBwqzcDBjsJ0YrIONBpCAsXxk8idXb8jL9aNIg15Wumm2enqqObahDHB5jnGOLmbasizvSVqy
               pfM9UCQCQl8xIqy+YgURXzXCN+kwUgHinrutZms87Jyi+D8Br8NY0+Nlf+zHvXAomD2W5CsEK7C+8SLBr3k/TsnRWHJ
               uECQHFE9RA2OP8WoaLPuGCyFXaxzICThSRZYluVnWkZtxsBhW2W8z1b8PvWUE7kMy7TnkzeJS2LSnaNHoyxi7IaPQUC
               QCwWU4U+v4lD7uYBw00Ga/xt+7+UqFPlPVdz1yyr4q24Zxaw0LgmuEvgU5dycq8N7JxjTubX0MIRR+G9fmDBBl8=\r\
               n-----END RSA PRIVATE KEY-----'                                                            
   
    ❯❱ data.projects.5.rules.hardcoded-hmac-key
          Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such
          as reading the secret from a config file or using an environment variable.                         
                                                                                                             
           44┆ export const hmac = (data: string) => crypto.createHmac('sha256',
               'pa4qacea4VK9t9nGv7yZtwmj').update(data).digest('hex')           
            ⋮┆----------------------------------------
          152┆ const hmac = crypto.createHmac('sha256', privateKey)
                                                                                 
    data/projects/5/extract/juice-shop-19.0.0/lib/startup/customizeApplication.ts
    ❯❱ data.projects.5.rules.html-in-template-string
          This template literal looks like HTML and has interpolated variables. These variables are not HTML-
          encoded by default. If the variables contain HTML tags, these may be interpreted by the browser,   
          resulting in cross-site scripting (XSS).                                                           
                                                                                                             
           84┆ const title = `<title>${config.get<string>('application.name')}</title>`
                                                                           
    data/projects/5/extract/juice-shop-19.0.0/lib/startup/validateConfig.ts
     ❱ data.projects.5.rules.missing-template-string-indicator
          This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?
                                                                                                  
          114┆ logger.warn(`Product ${colors.italic(product.name)} is used as ${appliedSpecials.map(({   
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          114┆ logger.warn(`Product ${colors.italic(product.name)} is used as ${appliedSpecials.map(({   
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          114┆ logger.warn(`Product ${colors.italic(product.name)} is used as ${appliedSpecials.map(({   
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          114┆ logger.warn(`Product ${colors.italic(product.name)} is used as ${appliedSpecials.map(({   
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          114┆ logger.warn(`Product ${colors.italic(product.name)} is used as ${appliedSpecials.map(({   
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          162┆ logger.warn(`Memory ${colors.italic(memory.caption)} is used as ${appliedSpecials.map(({  
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          162┆ logger.warn(`Memory ${colors.italic(memory.caption)} is used as ${appliedSpecials.map(({  
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          162┆ logger.warn(`Memory ${colors.italic(memory.caption)} is used as ${appliedSpecials.map(({  
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          162┆ logger.warn(`Memory ${colors.italic(memory.caption)} is used as ${appliedSpecials.map(({  
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
            ⋮┆----------------------------------------
          162┆ logger.warn(`Memory ${colors.italic(memory.caption)} is used as ${appliedSpecials.map(({  
               name }) => `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge
               (${colors.red('NOT OK')})`)                                                               
                                                                
    data/projects/5/extract/juice-shop-19.0.0/routes/b2bOrder.ts
    ❯❱ data.projects.5.rules.express-detect-notevil-usage
          Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any 
          sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up
          to date alternative. Be sure that only trusted input reaches an `eval()` function.                
                                                                                                            
           23┆ vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })
                                                               
    data/projects/5/extract/juice-shop-19.0.0/routes/captcha.ts
    ❯❱ data.projects.5.rules.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
                                                                                                           
           23┆ const answer = eval(expression).toString() // eslint-disable-line no-eval
                                                               
    data/projects/5/extract/juice-shop-19.0.0/routes/chatbot.ts
    ❯❱ data.projects.5.rules.unsafe-dynamic-method
          Using non-static data to retrieve and run functions from the object is dangerous. If the data is
          user-controlled, it may allow executing arbitrary code.                                         
                                                                                                          
          101┆ res.status(200).json(await botUtils[response.handler](req.body.query, user))
   
     ❱ data.projects.5.rules.eqeq-is-bad
          Detected a useless comparison operation `bot == bot` or `bot != bot`. This operation is always true.
          If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex.     
                                                                                                              
          159┆ if (bot == null) {
   
    ❯❱ data.projects.5.rules.raw-html-format
          User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-
          Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a         
          sanitization library such as DOMPurify to sanitize the HTML within.                                 
                                                                                                              
          197┆ body: bot.training.state ? bot.greet(`${user.id}`) :                                     
               `${config.get<string>('application.chatBot.name')} isn't ready at the moment, please wait
               while I set things up`                                                                   
    
    
          Taint comes from:
    
          166┆ const token = req.cookies.token || utils.jwtFrom(req)
    
    
          Taint flows through these intermediate variables:
    
          166┆ const token = req.cookies.token || utils.jwtFrom(req)
    
          175┆ const user = await getUserFromJwt(token)
    
    
                This is how taint reaches the sink:
    
          197┆ body: bot.training.state ? bot.greet(`${user.id}`) :                                     
               `${config.get<string>('application.chatBot.name')} isn't ready at the moment, please wait
               while I set things up`                                                                   
    
                                                                  
    data/projects/5/extract/juice-shop-19.0.0/routes/fileServer.ts
    ❯❱ data.projects.5.rules.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
                                                                                                             
           33┆ res.sendFile(path.resolve('ftp/', file))
    
    
          Taint comes from:
    
           26┆ function verify (file: string, res: Response, next: NextFunction) {
    
           27┆   if (file && (endsWithAllowlistedFileType(file) || (file === 'incident-support.kdbx'))) {
    
           28┆     file = security.cutOffPoisonNullByte(file)
    
           29┆
    
           30┆     challengeUtils.solveIf(challenges.directoryListingChallenge, () => { return
               file.toLowerCase() === 'acquisitions.md' })                                    
    
           31┆     verifySuccessfulPoisonNullByteExploit(file)
    
           32┆
    
           33┆     res.sendFile(path.resolve('ftp/', file))
    
           34┆   } else {
    
           35┆     res.status(403)
    
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
    
    
                This is how taint reaches the sink:
    
           33┆ res.sendFile(path.resolve('ftp/', file))
    
                                                                  
    data/projects/5/extract/juice-shop-19.0.0/routes/fileUpload.ts
    ❯❱ data.projects.5.rules.express-libxml-vm-noent
          Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML
          External Entities (XXE) attack if untrusted data is passed into it.                              
                                                                                                           
           83┆ const xmlDoc = vm.runInContext('libxml.parseXml(data, { noblanks: true, noent: true,
               nocdata: true })', sandbox, { timeout: 2000 })                                      
                                                                 
    data/projects/5/extract/juice-shop-19.0.0/routes/keyServer.ts
    ❯❱ data.projects.5.rules.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
                                                                                                             
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
    
    
          Taint comes from:
    
           10┆ return ({ params }: Request, res: Response, next: NextFunction) => {
    
    
          Taint flows through these intermediate variables:
    
           10┆ return ({ params }: Request, res: Response, next: NextFunction) => {
    
           11┆ const file = params.file
    
    
                This is how taint reaches the sink:
    
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
    
                                                                     
    data/projects/5/extract/juice-shop-19.0.0/routes/logfileServer.ts
    ❯❱ data.projects.5.rules.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
                                                                                                             
           14┆ res.sendFile(path.resolve('logs/', file))
    
    
          Taint comes from:
    
           10┆ return ({ params }: Request, res: Response, next: NextFunction) => {
    
    
          Taint flows through these intermediate variables:
    
           10┆ return ({ params }: Request, res: Response, next: NextFunction) => {
    
           11┆ const file = params.file
    
    
                This is how taint reaches the sink:
    
           14┆ res.sendFile(path.resolve('logs/', file))
    
                                                             
    data/projects/5/extract/juice-shop-19.0.0/routes/login.ts
    ❯❱ data.projects.5.rules.sequelize-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. Data replacement or data binding should be used. See                                     
          https://sequelize.org/master/manual/raw-queries.html                                                
                                                                                                              
           34┆ models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND
               password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model:
               UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge           
               loginBenderChallenge loginJimChallenge                                                 
   
   ❯❯❱ data.projects.5.rules.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
                                                                                                              
           34┆ models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND
               password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model:
               UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge           
               loginBenderChallenge loginJimChallenge                                                 
    
    
          Taint comes from:
    
           34┆ models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND
               password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model:
               UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge           
               loginBenderChallenge loginJimChallenge                                                 
    
    
                This is how taint reaches the sink:
    
           34┆ models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND
               password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model:
               UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge           
               loginBenderChallenge loginJimChallenge                                                 
    
    
            ⋮┆----------------------------------------
   
     ❱ data.projects.5.rules.generic-api-key
          A gitleaks generic-api-key was detected which attempts to identify hard-coded credentials.  It is   
          not recommended to store credentials in source-code, as this risks secrets being leaked  and used by
          either an internal or external malicious adversary. It is recommended to use  environment variables 
          to securely provide credentials or retrieve credentials from a  secure vault or HSM (Hardware       
          Security Module). This rule can introduce a lot of false positives,  it is not recommended to be    
          used in PR comments.                                                                                
                                                                                                              
           65┆ challengeUtils.solveIf(challenges.oauthUserPasswordChallenge, () => { return req.body.email
               === 'bjoern.kimminich@gmail.com' && req.body.password ===                                  
               'bW9jLmxpYW1nQGhjaW5pbW1pay5ucmVvamI=' })                                                  
                                                                        
    data/projects/5/extract/juice-shop-19.0.0/routes/quarantineServer.ts
    ❯❱ data.projects.5.rules.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
                                                                                                             
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
    
    
          Taint comes from:
    
           10┆ return ({ params, query }: Request, res: Response, next: NextFunction) => {
    
    
          Taint flows through these intermediate variables:
    
           10┆ return ({ params, query }: Request, res: Response, next: NextFunction) => {
    
           11┆ const file = params.file
    
    
                This is how taint reaches the sink:
    
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
    
                                                                
    data/projects/5/extract/juice-shop-19.0.0/routes/redirect.ts
    ❯❱ data.projects.5.rules.unknown-value-in-redirect
          It looks like 'toUrl' is read from user input and it is used to as a redirect. Ensure 'toUrl' is not
          externally controlled, otherwise this is an open redirect.                                          
                                                                                                              
           19┆ res.redirect(toUrl)
   
    ❯❱ data.projects.5.rules.express-open-redirect
          The application redirects to a URL specified by user-supplied input `query` that is not validated. 
          This could redirect users to malicious locations. Consider using an allow-list approach to validate
          URLs, or warn users they are being redirected to a third-party website.                            
                                                                                                             
           19┆ res.redirect(toUrl)
    
    
          Taint comes from:
    
           14┆ return ({ query }: Request, res: Response, next: NextFunction) => {
    
    
          Taint flows through these intermediate variables:
    
           14┆ return ({ query }: Request, res: Response, next: NextFunction) => {
    
           15┆ const toUrl: string = query.to as string
    
    
                This is how taint reaches the sink:
    
           19┆ res.redirect(toUrl)
    
                                                              
    data/projects/5/extract/juice-shop-19.0.0/routes/search.ts
    ❯❱ data.projects.5.rules.sequelize-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. Data replacement or data binding should be used. See                                     
          https://sequelize.org/master/manual/raw-queries.html                                                
                                                                                                              
           23┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR   
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code-
               snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge                        
   
   ❯❯❱ data.projects.5.rules.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
                                                                                                              
           23┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR   
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code-
               snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge                        
    
    
          Taint comes from:
    
           21┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
          Taint flows through these intermediate variables:
    
           21┆ let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''
    
    
                This is how taint reaches the sink:
    
           23┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR   
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code-
               snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge                        
    
                                                                   
    data/projects/5/extract/juice-shop-19.0.0/routes/userProfile.ts
   ❯❯❱ data.projects.5.rules.code-string-concat
          Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable
          this can lead to execution of arbitrary system commands in the context of your application process.
          Avoid `eval` whenever possible.                                                                    
                                                                                                             
           62┆ username = eval(code) // eslint-disable-line no-eval
    
    
          Taint comes from:
    
           35┆ const loggedInUser = security.authenticatedUsers.get(req.cookies.token)
    
    
          Taint flows through these intermediate variables:
    
           35┆ const loggedInUser = security.authenticatedUsers.get(req.cookies.token)
    
           42┆ user = await UserModel.findByPk(loggedInUser.data.id)
    
           53┆ let username = user.username
    
           57┆ const code = username?.substring(2, username.length - 1)
    
    
                This is how taint reaches the sink:
    
           62┆ username = eval(code) // eslint-disable-line no-eval
    
    
            ⋮┆----------------------------------------
   
    ❯❱ data.projects.5.rules.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
                                                                                                           
           62┆ username = eval(code) // eslint-disable-line no-eval
                                                              
    data/projects/5/extract/juice-shop-19.0.0/routes/verify.ts
    ❯❱ data.projects.5.rules.html-in-template-string
          This template literal looks like HTML and has interpolated variables. These variables are not HTML-
          encoded by default. If the variables contain HTML tags, these may be interpreted by the browser,   
          resulting in cross-site scripting (XSS).                                                           
                                                                                                             
          184┆ if (utils.contains(osaft.description, `<a                                          
               href="${config.get<string>('challenges.overwriteUrlForProductTamperingChallenge')}"
               target="_blank">`)) {                                                              
                                                                    
    data/projects/5/extract/juice-shop-19.0.0/routes/videoHandler.ts
    ❯❱ data.projects.5.rules.unknown-value-with-script-tag
          Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.    
                                                                                                            
           58┆ challengeUtils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs,
               '</script><script>alert(`xss`)</script>') })                                            
            ⋮┆----------------------------------------
           71┆ compiledTemplate = compiledTemplate.replace('<script id="subtitle"></script>', '<script  
               id="subtitle" type="text/vtt" data-label="English" data-lang="en">' + subs + '</script>')
                                                       
    data/projects/5/extract/juice-shop-19.0.0/server.ts
     ❱ data.projects.5.rules.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
                                                                                                            
          155┆ console.error('Error in timed startup function: ' + name, err)
    
    
          Taint comes from:
    
          155┆ console.error('Error in timed startup function: ' + name, err)
    
    
                This is how taint reaches the sink:
    
          155┆ console.error('Error in timed startup function: ' + name, err)
    
    
            ⋮┆----------------------------------------
   
    ❯❱ data.projects.5.rules.express-check-directory-listing
          Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and 
          files. It is recommended to disable directory listing unless it is a public resource. If you need
          directory listing, ensure that sensitive files are inaccessible when querying the resource.      
                                                                                                           
          269┆ app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-code-
               snippet vuln-line directoryListingChallenge                                            
            ⋮┆----------------------------------------
          273┆ app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true,
               view: 'details' }))                                                                   
            ⋮┆----------------------------------------
          277┆ app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons:
               true, view: 'details' }))                                                             
            ⋮┆----------------------------------------
          281┆ app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view:
               'details' })) // vuln-code-snippet vuln-line accessLogDisclosureChallenge             
                                                                       
    data/projects/5/extract/juice-shop-19.0.0/views/dataErasureForm.hbs
    ❯❱ data.projects.5.rules.unquoted-attribute-var
          Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject
          custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{
          expr }}".                                                                                         
                                                                                                            
           21┆ <input type="email" required placeholder={{userEmail}} name="email" id="email">
